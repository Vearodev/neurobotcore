"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const node_telegram_bot_api_1 = __importDefault(require("node-telegram-bot-api"));
const fusion_brain_1 = require("./services/neural-networks/fusion-brain");
const analytic_1 = require("./services/analytics/analytic");
const types_1 = require("./types");
const utils_1 = require("./utils");
// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è FusionBrain
const FUSION_BRAIN_API_KEY = '2BE11A47E80F4D4155DF50D074B968B9';
const FUSTION_BRAIN_SECRET_KEY = '76E5AABD2FC5E083B1B8DC106A97E56B';
// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è OpenAI
const OPENAI_API_KEY = '';
// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞
const TELEGRAM_API_KEY = '6876087001:AAGby6Pf8LiyZT0HEiv9Hm18BEh4gBrAtFg';
// –°–µ—Ä–≤–∏—Å –¥–ª—è –≤–µ–¥–µ–Ω–∏—è –±–∞–∑–æ–≤–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
// –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Å—á–∏—Ç–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–∞–∂–¥–æ–º –∏–∑ —Å–µ—Ä–≤–∏—Å–æ–≤
const Analytics = new analytic_1.AnalitycManager();
// –°–µ—Ä–≤–∏—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ 
// —Å –ø–æ–º–æ—â—å—é –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ FUSION BRAIN
const FusionBrainService = new fusion_brain_1.FusionBrain({
    API_KEY: FUSION_BRAIN_API_KEY,
    SECRET_KEY: FUSTION_BRAIN_SECRET_KEY
});
const bot = new node_telegram_bot_api_1.default(TELEGRAM_API_KEY, { polling: true });
const commandExecuter = (msg) => (msg === null || msg === void 0 ? void 0 : msg.length) ? msg[1] : null;
bot.getMe()
    .then((me) => {
    SetListeners();
    Bootstrap();
})
    .catch((err) => {
    console.error('–ù–µ –ø–∞—à–µ—Ç');
});
// –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥—ã –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é FusionBrain
function FusionBrainText2ImageHandler(tgMessage_1, prompt_1) {
    return __awaiter(this, arguments, void 0, function* (tgMessage, prompt, reaction = true, reply_id, queryUser) {
        var _a, _b, _c, _d;
        try {
            const reaction = [{ type: 'emoji', emoji: 'üëç' }];
            // –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ –≤ –∫–æ—Ç–æ—Ä–æ–º –ø–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
            const chatId = tgMessage.chat.id;
            const messageId = tgMessage.message_id;
            const isBot = ((_a = tgMessage.from) === null || _a === void 0 ? void 0 : _a.is_bot) || false;
            const userName = isBot ? (_c = (_b = tgMessage.reply_to_message) === null || _b === void 0 ? void 0 : _b.from) === null || _c === void 0 ? void 0 : _c.username : (_d = tgMessage.from) === null || _d === void 0 ? void 0 : _d.username;
            if (!userName)
                return;
            if (reaction)
                //@ts-ignore
                bot.setMessageReaction(chatId, tgMessage.message_id, { reaction: JSON.stringify(reaction) });
            // –° –ø–æ–º–æ—â—å—é –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ FusionBrain –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É
            const data = yield FusionBrainService.Text2Image(prompt);
            // –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –µ—Å—Ç—å, –∏ –æ–Ω –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –Ω–µ –ø—Ä–æ—à–µ–¥—à–∏–π —Ü–µ–Ω–∑—É—Ä—É
            if (data && data.censored)
                bot.sendMessage(chatId, `–ó–∞–ø—Ä–æ—Å –Ω–µ –ø—Ä–æ—à—ë–ª –ø—Ä–æ–≤–µ—Ä–∫—É —Ü–µ–Ω–∑—É—Ä—ã`, {
                    reply_to_message_id: reply_id || tgMessage.message_id
                });
            // –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –µ—Å—Ç—å, –∏ —Å –Ω–∏–º –≤—Å—ë –æ–∫, –≤ –æ—Ç–≤–µ—Ç–µ –µ—Å—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫–∞ –≤ base
            // –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –µ—ë –≤ –±—É—Ñ–µ—Ä –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —Ç–µ–ª–µ–≥—É
            else if (data && data.images) {
                yield bot.sendPhoto(chatId, Buffer.from(data.images[0], 'base64'), {
                    caption: prompt,
                    reply_to_message_id: reply_id || tgMessage.message_id,
                    reply_markup: {
                        inline_keyboard: [
                            [
                                {
                                    text: 'üóë',
                                    callback_data: JSON.stringify({
                                        action: 'delete'
                                    })
                                },
                                {
                                    text: 'üîÑ',
                                    callback_data: JSON.stringify({
                                        action: 'retry',
                                    })
                                },
                                {
                                    text: 'üèÜ',
                                    callback_data: JSON.stringify({
                                        action: 'stat',
                                    })
                                }
                            ]
                        ]
                    }
                });
            }
            yield Analytics.Write(types_1.Service.FusionBrain, chatId, queryUser || userName);
        }
        catch (error) {
            console.log('ERROR', error);
        }
    });
}
function SetListeners() {
    return __awaiter(this, void 0, void 0, function* () {
        // –¢—Ä–∏–≥–≥–µ—Ä –¥–ª—è –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ FusionBrain
        bot.onText(/\/f (.+)/, (msg, match) => __awaiter(this, void 0, void 0, function* () {
            var _a;
            const command = commandExecuter(match);
            if (command === 'stat')
                return bot.sendMessage(msg.chat.id, (0, utils_1.PrettyJSON)(Analytics.data[String(msg.chat.id)]), {
                    reply_to_message_id: (_a = msg === null || msg === void 0 ? void 0 : msg.reply_to_message) === null || _a === void 0 ? void 0 : _a.message_id,
                    parse_mode: 'HTML'
                });
            yield FusionBrainText2ImageHandler(msg, command);
        }));
        bot.onText(/\/roll/, (msg, match) => __awaiter(this, void 0, void 0, function* () {
            bot.sendMessage(msg.chat.id, String(Math.floor(Math.random() * 100) + 1), {
                reply_to_message_id: msg.message_id
            });
        }));
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º callback –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É
        bot.on('callback_query', (callbackQuery) => __awaiter(this, void 0, void 0, function* () {
            var _a, _b;
            const userName = callbackQuery.from.username;
            const message = callbackQuery.message;
            const chatId = callbackQuery.message.chat.id;
            const messageId = callbackQuery.message.message_id;
            const { action } = JSON.parse(callbackQuery.data);
            // console.log('query', callbackQuery)
            // console.log('message', message)
            // console.log('caption', message.caption)
            // console.log('data', callbackQuery.data)
            // console.log('reply_to_message', message.reply_to_message)
            if (action === 'delete') {
                // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ —Ä–µ–∞–∫—Ü–∏—è "–¥–∏–∑–ª–∞–π–∫"
                bot.deleteMessage(chatId, messageId)
                    .then(() => {
                })
                    .catch(err => {
                    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', err);
                });
            }
            else if (action === 'retry') {
                const reaction = [{ type: 'emoji', emoji: 'üëç' }];
                bot.editMessageReplyMarkup({ inline_keyboard: [] }, { chat_id: chatId, message_id: messageId });
                //@ts-ignore
                bot.setMessageReaction(chatId, messageId, { reaction: JSON.stringify(reaction) });
                yield FusionBrainText2ImageHandler(message, message.caption, false, (_a = message === null || message === void 0 ? void 0 : message.reply_to_message) === null || _a === void 0 ? void 0 : _a.message_id, userName);
                bot.editMessageReplyMarkup({
                    inline_keyboard: [
                        [
                            {
                                text: 'üóë',
                                callback_data: JSON.stringify({
                                    action: 'delete'
                                })
                            },
                            {
                                text: 'üîÑ',
                                callback_data: JSON.stringify({
                                    action: 'retry',
                                })
                            }
                        ]
                    ]
                }, { chat_id: chatId, message_id: messageId });
            }
            else if (action === 'stat') {
                bot.sendMessage(message.chat.id, (0, utils_1.PrettyJSON)(Analytics.data[String(message.chat.id)]), {
                    reply_to_message_id: (_b = message === null || message === void 0 ? void 0 : message.reply_to_message) === null || _b === void 0 ? void 0 : _b.message_id,
                    parse_mode: 'HTML'
                });
            }
        }));
    });
}
function Bootstrap() {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            yield Analytics.Bootstrap();
            yield FusionBrainService.Bootstrap();
        }
        catch (error) {
        }
        finally {
        }
    });
}
//# sourceMappingURL=index.js.map