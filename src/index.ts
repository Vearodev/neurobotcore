
import TelegramBot from 'node-telegram-bot-api'
import { FusionBrain } from './services/neural-networks/fusion-brain';
import { Analytics } from './services/storage';



// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è FusionBrain
const FUSION_BRAIN_API_KEY = '2BE11A47E80F4D4155DF50D074B968B9';
const FUSTION_BRAIN_SECRET_KEY = '76E5AABD2FC5E083B1B8DC106A97E56B';

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è OpenAI
const OPENAI_API_KEY = '';

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞
const TELEGRAM_API_KEY = '6876087001:AAGby6Pf8LiyZT0HEiv9Hm18BEh4gBrAtFg';


const FusionBrainService = new FusionBrain({
    API_KEY: FUSION_BRAIN_API_KEY,
    SECRET_KEY: FUSTION_BRAIN_SECRET_KEY
})


const bot = new TelegramBot(TELEGRAM_API_KEY, { polling: true });
const commandExecuter = (msg: RegExpExecArray | null) => msg?.length ? msg[1] : null


// –°–æ–∑–¥–∞—ë–º —Ç—Ä–∏–≥–≥–µ—Ä –¥–ª—è —Ä–µ–∞–≥–∏—Ä–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ
// –í –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ –±–æ—Ç —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å /fb
bot.onText(/\/fb (.+)/, async (msg, match) => {
    const command = commandExecuter(match)

    if(command === 'stat') {
        const data = Analytics.Read()

    
        bot.sendMessage(msg.chat.id, JSON.stringify(data), {
            reply_to_message_id: msg.message_id
        });
    }
    else {
        await FusionBrainText2ImageHandler(msg, command!)
    }
})


bot.onText(/\/roll/, async (msg, match) => {
    bot.sendMessage(msg.chat.id, String(Math.floor(Math.random() * 100) + 1), {
        reply_to_message_id: msg.message_id
    });
})


 // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º callback –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É
 bot.on('callback_query', async (callbackQuery:any) => {
    const message = callbackQuery.message as TelegramBot.Message;
    const chatId = callbackQuery.message.chat.id;
    const messageId = callbackQuery.message.message_id;
    const {action} = JSON.parse(callbackQuery.data);

    console.log('message', message)
    console.log('caption', message.caption)
    console.log('data', callbackQuery.data)
    console.log('reply_to_message', message.reply_to_message)

    
    if (action === 'delete') {
        // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ —Ä–µ–∞–∫—Ü–∏—è "–¥–∏–∑–ª–∞–π–∫"
        bot.deleteMessage(chatId, messageId)
            .then(() => {
                
            })
            .catch(err => {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', err);
            });
    }

    else if(action === 'retry') {
        const reaction = [{ type: 'emoji', emoji: 'üëç' }]; 

        
        bot.editMessageReplyMarkup({inline_keyboard: []}, {chat_id: chatId, message_id: messageId});
        //@ts-ignore
        bot.setMessageReaction(chatId, messageId, {reaction: JSON.stringify(reaction)})
        await FusionBrainText2ImageHandler(message, message.caption!, false, message?.reply_to_message?.message_id)
        bot.editMessageReplyMarkup({inline_keyboard: [
            [
                {
                    text: 'üóë', 
                    callback_data: JSON.stringify({
                        action: 'delete'
                    })
                },
                {
                    text: 'üîÑ', 
                    callback_data: JSON.stringify({
                        action: 'retry',
                    })
                }
            ]
        ]}, {chat_id: chatId, message_id: messageId});
    }

    else if(action === 'stat') {

        const originalKeyboards = message.reply_markup?.inline_keyboard



        bot.editMessageReplyMarkup({inline_keyboard: [
            [
              
            ]
        ]}, {chat_id: chatId, message_id: messageId});

        const data = Analytics.Read()        
    
        if(message.message_thread_id) bot.sendMessage(message.chat.id, JSON.stringify(data), {
            message_thread_id: message.message_thread_id
        });
        else {
            bot.sendMessage(message.chat.id, JSON.stringify(data), {
               
            });
        }

        bot.editMessageReplyMarkup({inline_keyboard: [[ {
            text: 'üóë', 
            callback_data: JSON.stringify({
                action: 'delete'
            })
        },
        {
            text: 'üîÑ', 
            callback_data: JSON.stringify({
                action: 'retry',
            })
        }]]}, {chat_id: chatId, message_id: messageId})
    }
});


// –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥—ã –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é FusionBrain
async function FusionBrainText2ImageHandler(tgMessage: TelegramBot.Message, prompt: string, reaction: boolean = true, reply_id?: number) {
    try {
        // –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ –≤ –∫–æ—Ç–æ—Ä–æ–º –ø–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
        const chatId = tgMessage.chat.id;

        // –ü–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –º—ã –ø—Ä–æ–≤–µ—Ä–∏–ª–∏ —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∏ –º—ã –µ–µ –ø—Ä–∏–Ω–∏–º–∞–µ–º
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —á–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º —á—Ç–æ –ø—Ä–æ—Ü–µ–¥—É—Ä–∞ –Ω–∞—á–∞—Ç–∞
        // bot.sendMessage(chatId, `–ó–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø—Ä–∏–Ω—è—Ç. –í—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–∏–º–µ—Ä–Ω–æ 30 —Å–µ–∫—É–Ω–¥`, {
        //     reply_to_message_id: tgMessage.message_id
        // });

        if(reaction) {
            const reaction = [{ type: 'emoji', emoji: 'üëç' }]; 

            //@ts-ignore
            bot.setMessageReaction(chatId, tgMessage.message_id, {reaction: JSON.stringify(reaction)})
            .then(() => {
                console.log('Reaction added successfully!');
            })
        }
       

        // –° –ø–æ–º–æ—â—å—é –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ FusionBrain –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É
        const data: any = await FusionBrainService.Text2Image(prompt)

        const analyticsData = Analytics.Read()

        const userId = tgMessage.reply_to_message?.from?.username || tgMessage.from!.username || 'all'
        if(analyticsData[userId]) analyticsData[userId]++;
        else analyticsData[userId] = 1

        Analytics.Write(analyticsData)

        
        // return bot.sendMessage(chatId, JSON.stringify(tgMessage), {
        //     reply_to_message_id: tgMessage.message_id
        // });

        // –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –µ—Å—Ç—å, –∏ –æ–Ω –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –Ω–µ –ø—Ä–æ—à–µ–¥—à–∏–π —Ü–µ–Ω–∑—É—Ä—É
        if (data && data.censored)
        {



            bot.sendMessage(chatId, `–ó–∞–ø—Ä–æ—Å –Ω–µ –ø—Ä–æ—à—ë–ª –ø—Ä–æ–≤–µ—Ä–∫—É —Ü–µ–Ω–∑—É—Ä—ã`, {
                reply_to_message_id: reply_id || tgMessage.message_id
            });

        }
        // –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –µ—Å—Ç—å, –∏ —Å –Ω–∏–º –≤—Å—ë –æ–∫, –≤ –æ—Ç–≤–µ—Ç–µ –µ—Å—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫–∞ –≤ base
        // –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –µ—ë –≤ –±—É—Ñ–µ—Ä –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —Ç–µ–ª–µ–≥—É
        else if (data && data.images) {
            
            const sendMessage = await bot.sendPhoto(chatId, Buffer.from(data.images[0], 'base64'), {
                caption: prompt,
                reply_to_message_id: reply_id || tgMessage.message_id,
                reply_markup: {
                    inline_keyboard: [
                        [
                            {
                                text: 'üóë', 
                                callback_data: JSON.stringify({
                                    action: 'delete'
                                })
                            },
                            {
                                text: 'üîÑ', 
                                callback_data: JSON.stringify({
                                    action: 'retry',
                                })
                            },
                            {
                                text: 'üèÜ', 
                                callback_data: JSON.stringify({
                                    action: 'stat',
                                })
                            }
                        ]
                    ]
                }
            })           
        }


    } catch (error) {
        console.log('ERROR', error)
    }
}
