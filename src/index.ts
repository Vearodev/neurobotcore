import 'dotenv/config';

import TelegramBot from 'node-telegram-bot-api'
import { FusionBrain } from './services/neural-networks/fusion-brain';
import { AnalitycManager } from './services/analytics/analytic';
import { Service } from './types';
import { PrettyJSON } from './utils';
import { GigachatService } from './services/neural-networks/gigachat';
import path from 'path';
import consola from 'consola';
import { GigchatModel } from './services/neural-networks/gigachat/types';


// –°–µ—Ä–≤–∏—Å –¥–ª—è –≤–µ–¥–µ–Ω–∏—è –±–∞–∑–æ–≤–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
// –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Å—á–∏—Ç–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–∞–∂–¥–æ–º –∏–∑ —Å–µ—Ä–≤–∏—Å–æ–≤
const Analytics = new AnalitycManager();

// –°–µ—Ä–≤–∏—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ 
// —Å –ø–æ–º–æ—â—å—é –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ FUSION BRAIN
const FusionBrainService = new FusionBrain({
    API_KEY: process.env.FUSION_BRAIN_API_KEY,
    SECRET_KEY: process.env.FUSTION_BRAIN_SECRET_KEY
})


const Gigachat = new GigachatService(process.env.GIGACHAT_TOKEN)


const botToken = process.env.TELEGRAM_BOT_TOKEN
if(!botToken) throw new Error('–ù–µ—Ç —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –±–æ—Ç–∞')

const bot = new TelegramBot(botToken, { polling: true });

const commandExecuter = (msg: RegExpExecArray | null) => msg?.length ? msg[1] : null



bot.getMe()
    .then((me) => {
        SetListeners()
        Bootstrap()
    })
    .catch((err) => {
        console.error('–ù–µ –ø–∞—à–µ—Ç')
    })


// –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥—ã –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é FusionBrain
async function FusionBrainText2ImageHandler(tgMessage: TelegramBot.Message, prompt: string, reaction: boolean = true, reply_id?: number, queryUser?: string) {
    try {
        const reaction = [{ type: 'emoji', emoji: 'üëç' }];
        // –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ –≤ –∫–æ—Ç–æ—Ä–æ–º –ø–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
        const chatId = tgMessage.chat.id;
        const messageId = tgMessage.message_id;
        const isBot = tgMessage.from?.is_bot || false;
        const userName = isBot ? tgMessage.reply_to_message?.from?.username : tgMessage.from?.username;

        if (!userName) return


        if (reaction)
            //@ts-ignore
            bot.setMessageReaction(chatId, tgMessage.message_id, { reaction: JSON.stringify(reaction) })


        // –° –ø–æ–º–æ—â—å—é –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ FusionBrain –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É
        const data: any = await FusionBrainService.Text2Image(prompt)




        // –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –µ—Å—Ç—å, –∏ –æ–Ω –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –Ω–µ –ø—Ä–æ—à–µ–¥—à–∏–π —Ü–µ–Ω–∑—É—Ä—É
        if (data && data.censored)
            bot.sendMessage(chatId, `–ó–∞–ø—Ä–æ—Å –Ω–µ –ø—Ä–æ—à—ë–ª –ø—Ä–æ–≤–µ—Ä–∫—É —Ü–µ–Ω–∑—É—Ä—ã`, {
                reply_to_message_id: reply_id || tgMessage.message_id
            });


        // –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –µ—Å—Ç—å, –∏ —Å –Ω–∏–º –≤—Å—ë –æ–∫, –≤ –æ—Ç–≤–µ—Ç–µ –µ—Å—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫–∞ –≤ base
        // –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –µ—ë –≤ –±—É—Ñ–µ—Ä –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —Ç–µ–ª–µ–≥—É
        else if (data && data.images) {

            await bot.sendPhoto(chatId, Buffer.from(data.images[0], 'base64'), {
                caption: prompt,
                reply_to_message_id: reply_id || tgMessage.message_id,
                reply_markup: {
                    inline_keyboard: [
                        [
                            {
                                text: 'üóë',
                                callback_data: JSON.stringify({
                                    action: 'delete'
                                })
                            },
                            {
                                text: 'üîÑ',
                                callback_data: JSON.stringify({
                                    action: 'retry',
                                })
                            },
                            {
                                text: 'üèÜ',
                                callback_data: JSON.stringify({
                                    action: 'stat',
                                })
                            }
                        ]
                    ]
                }
            })
        }



        await Analytics.Write(Service.FusionBrain, chatId, queryUser || userName)
    } catch (error) {
        console.log('ERROR', error)
    }
}



async function SetListeners() {


    // –¢—Ä–∏–≥–≥–µ—Ä –¥–ª—è –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ FusionBrain
    bot.onText(/\/f (.+)/, async (msg, match) => {
        const command = commandExecuter(match)

        if (command === 'stat')
            return bot.sendMessage(msg.chat.id, PrettyJSON(Analytics.data[String(msg.chat.id)]), {
                reply_to_message_id: msg?.reply_to_message?.message_id,
                parse_mode: 'HTML'
            });


        await FusionBrainText2ImageHandler(msg, command!)
    })


    bot.onText(/\/news (.+)/, async (msg, match) => {
        const command = commandExecuter(match)

        const chatIds = Object.keys(Analytics.data).filter(i => parseInt(i) < 0)
        console.log(chatIds)

        chatIds.forEach(id => bot.sendMessage(id, command!, {
            parse_mode: 'HTML'
        }))
    })


    bot.onText(/\/g (.+)/, async (msg, match) => {
        const command = commandExecuter(match)

        if (command === 'auth') {
            const r = await Gigachat.Auth()
            return bot.sendMessage(msg.chat.id, PrettyJSON(r), {
                reply_to_message_id: msg?.reply_to_message?.message_id,
                parse_mode: 'HTML'
            });
        }


        else if (command === 'help') {
           
            return bot.sendMessage(msg.chat.id, `–¢—É—Ç –±—É–¥–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥`, {
                reply_to_message_id:msg.message_id
            });
        }


        const reaction = [{ type: 'emoji', emoji: 'üëç' }];
         //@ts-ignore
         bot.setMessageReaction(chatId, msg.message_id, { reaction: JSON.stringify(reaction) })


        const response = await Gigachat.ChatCompletion(GigchatModel.GigaChat, command!)
        const choice = response?.choices[0]?.message.content
        
        await Analytics.Write(Service.Gigachat, msg.chat.id, msg.from?.username!, response?.usage.total_tokens)


        bot.sendMessage(msg.chat.id, choice!, {
            reply_to_message_id:msg.message_id,
            parse_mode: 'Markdown'
        });

        //  await FusionBrainText2ImageHandler(msg, command!)
    })



    bot.onText(/\/roll/, async (msg, match) => {
        bot.sendMessage(msg.chat.id, String(Math.floor(Math.random() * 100) + 1), {
            reply_to_message_id: msg.message_id
        });
    })


    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º callback –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É
    bot.on('callback_query', async (callbackQuery: any) => {
        const userName = callbackQuery.from.username;
        const message = callbackQuery.message as TelegramBot.Message;
        const chatId = callbackQuery.message.chat.id;
        const messageId = callbackQuery.message.message_id;
        const { action } = JSON.parse(callbackQuery.data);

        // console.log('query', callbackQuery)
        // console.log('message', message)
        // console.log('caption', message.caption)
        // console.log('data', callbackQuery.data)
        // console.log('reply_to_message', message.reply_to_message)


        if (action === 'delete') {
            // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ —Ä–µ–∞–∫—Ü–∏—è "–¥–∏–∑–ª–∞–π–∫"
            bot.deleteMessage(chatId, messageId)
                .then(() => {

                })
                .catch(err => {
                    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', err);
                });
        }

        else if (action === 'retry') {
            const reaction = [{ type: 'emoji', emoji: 'üëç' }];


            bot.editMessageReplyMarkup({ inline_keyboard: [] }, { chat_id: chatId, message_id: messageId });
            //@ts-ignore
            bot.setMessageReaction(chatId, messageId, { reaction: JSON.stringify(reaction) })
            await FusionBrainText2ImageHandler(message, message.caption!, false, message?.reply_to_message?.message_id, userName)
            bot.editMessageReplyMarkup({
                inline_keyboard: [
                    [
                        {
                            text: 'üóë',
                            callback_data: JSON.stringify({
                                action: 'delete'
                            })
                        },
                        {
                            text: 'üîÑ',
                            callback_data: JSON.stringify({
                                action: 'retry',
                            })
                        }
                    ]
                ]
            }, { chat_id: chatId, message_id: messageId });
        }

        else if (action === 'stat') {



            bot.sendMessage(message.chat.id, PrettyJSON(Analytics.data[String(message.chat.id)]), {
                reply_to_message_id: message?.reply_to_message?.message_id,
                parse_mode: 'HTML'
            });
        }
    });
}


async function Bootstrap() {
    try {
        TLSCertsInit()
        await Analytics.Bootstrap()
        await FusionBrainService.Bootstrap()

    } catch (error) {

    } finally {

    }
}


function TLSCertsInit() {

    const test = path.resolve('certs')
    process.env.NODE_EXTRA_CA_CERTS = test
    process.env.NODE_TLS_REJECT_UNAUTHORIZED = '0'
}